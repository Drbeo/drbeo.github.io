<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Drbeo Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-20T17:35:29.715Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Drbeo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题</title>
    <link href="http://yoursite.com/2018/03/21/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/21/前端面试题/</id>
    <published>2018-03-20T17:34:31.000Z</published>
    <updated>2018-03-20T17:35:29.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何理解HTML结构的语义化"><a href="#如何理解HTML结构的语义化" class="headerlink" title="如何理解HTML结构的语义化"></a>如何理解HTML结构的语义化</h2><ol><li>符合W3C统一规范标准，是技术趋势</li><li>没有样式时浏览器的默认样式也能让结构清洗</li><li>屏幕阅读器会根据你的标记来“读”你的网页</li><li>对其他移动终端友好，如机顶盒，PDA</li><li>对SEO友好</li></ol><h2 id="前端角度出发做好SEO优化需要考虑什么？"><a href="#前端角度出发做好SEO优化需要考虑什么？" class="headerlink" title="前端角度出发做好SEO优化需要考虑什么？"></a>前端角度出发做好SEO优化需要考虑什么？</h2><ol><li>外链数量和质量</li><li>HTML页面结构和内容</li><li>Meta标签优化 Title，网站描述(Description)，Author，Category(目录)，Language(编码语种)</li><li>关键词分析(针对关键词优化)和选择(确定主关键词)时SEO最重要的工作之一，关键词密度，相关度，突出行</li></ol><h2 id="鼠标单击Button1后将Button1移动到Button2的后面"><a href="#鼠标单击Button1后将Button1移动到Button2的后面" class="headerlink" title="鼠标单击Button1后将Button1移动到Button2的后面"></a>鼠标单击Button1后将Button1移动到Button2的后面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//html</span><br><span class="line"></span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;Button1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button id=&quot;btn1&quot;&gt;Button2&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">let btn = document.getElementById(&apos;btn&apos;);</span><br><span class="line"></span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">    let cloneBtn = this.cloneNode(true);</span><br><span class="line">    let parent = this.parentNode;</span><br><span class="line"></span><br><span class="line">    parent.removeChild(this);</span><br><span class="line"></span><br><span class="line">    parent.appendChild(cloneBtn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断字符串出现最多的字符"><a href="#判断字符串出现最多的字符" class="headerlink" title="判断字符串出现最多的字符"></a>判断字符串出现最多的字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 1, 7, 9, 2, 8, 2, 1];</span><br><span class="line"></span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    let obj = &#123;&#125;;</span><br><span class="line">    let newArr = [];</span><br><span class="line"></span><br><span class="line">    arr.map(function (item, index) &#123;</span><br><span class="line">        if (!obj[item])&#123;</span><br><span class="line">            obj[item] = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            obj[item]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    let num = 0;</span><br><span class="line">    let word = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">    for (let key in obj) &#123;</span><br><span class="line">        if (obj[key] &gt; num)&#123;</span><br><span class="line">            num = obj[key];</span><br><span class="line">            word = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;obj, num, word&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(unique(arr));</span><br><span class="line"></span><br><span class="line">let str = &apos;hello,wuSong_gg&apos;;</span><br><span class="line"></span><br><span class="line">let strArr = str.split(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">console.log(unique(strArr));</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 1, 7, 9, 2, 8, 2, 1];</span><br><span class="line"></span><br><span class="line">function unique(arr) &#123;</span><br><span class="line">    let obj = &#123;&#125;;</span><br><span class="line">    let newArr = [];</span><br><span class="line">    arr.map(function (item, index) &#123;</span><br><span class="line">        if (!obj[item])&#123;</span><br><span class="line">            obj[item] = 1;</span><br><span class="line">            newArr.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(unique(arr));</span><br></pre></td></tr></table></figure><h2 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a>数组随机排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</span><br><span class="line">function randSort1(arr)&#123;</span><br><span class="line">    for(var i = 0,len = arr.length;i &lt; len; i++ )&#123;</span><br><span class="line">        var rand = parseInt(Math.random()*len);</span><br><span class="line">        var temp = arr[rand];</span><br><span class="line">        arr[rand] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">//console.log(randSort1(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.sort(function () &#123;</span><br><span class="line">    return Math.random() - 0.5;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h2 id="多指操作"><a href="#多指操作" class="headerlink" title="多指操作"></a>多指操作</h2><h4 id="gesturestart"><a href="#gesturestart" class="headerlink" title="gesturestart"></a>gesturestart</h4><ul><li>手指触碰当前元素，屏幕上有两个或者两个以上的手指<blockquote><p>注意：我们说的多指，指定是两个手指</p></blockquote></li></ul><h4 id="gesturechange"><a href="#gesturechange" class="headerlink" title="gesturechange"></a>gesturechange</h4><ul><li>手指触碰当前元素，屏幕上有两个或者两个以上的手指位置在发生移动</li></ul><h4 id="gestureend"><a href="#gestureend" class="headerlink" title="gestureend"></a>gestureend</h4><ul><li>在gesturestart后, 屏幕上只剩下两根以下（不包括两根）的手指</li></ul><h4 id="rotation"><a href="#rotation" class="headerlink" title="rotation"></a>rotation</h4><ul><li>event.rotation 手指旋转的角度，一般只考虑0-90度</li><li>一般指手指放在元素上进行缩放</li></ul><h4 id="手指列表"><a href="#手指列表" class="headerlink" title="手指列表"></a>手指列表</h4><ul><li>changedTouches:触发事件的手指列表</li><li>targetTouches:元素身上的手指列表</li><li>touches:屏幕上的手指列表</li></ul><h2 id="HTML5的离线缓存技术"><a href="#HTML5的离线缓存技术" class="headerlink" title="HTML5的离线缓存技术"></a>HTML5的离线缓存技术</h2><ul><li>用户离线更新机器上的缓存文件</li><li>新建的 .appcache 文件缓存机制</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><ol><li>页面头部加一个manifest的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html manifest = &quot;cache.manifest&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol><li>在cache.manifest 文件的编写离线存储资源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">        #v0.11</span><br><span class="line">        CACHE:</span><br><span class="line">        js/app.js</span><br><span class="line">        css/style.css</span><br><span class="line">        NETWORK:</span><br><span class="line">        resourse/logo.png</span><br><span class="line">        FALLBACK:</span><br><span class="line">        / /offline.html</span><br></pre></td></tr></table></figure><ol><li>在离线状态时，操作window.applicationCache进行需求实现。</li></ol><h2 id="请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</span><br><span class="line">cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</span><br><span class="line">sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</span><br><span class="line"></span><br><span class="line">存储大小：</span><br><span class="line">cookie数据大小不能超过4k。</span><br><span class="line">sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</span><br><span class="line"></span><br><span class="line">有期时间：</span><br><span class="line">localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</span><br><span class="line">sessionStorage  数据在当前浏览器窗口关闭后自动删除。</span><br><span class="line">cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</span><br></pre></td></tr></table></figure><h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><ul><li>桌面浏览器中，浏览器窗口就是约束你的CSS布局视口(初始包含块)</li><li>它的作用是给CSS布局限制了一个最大宽度，视口宽度和浏览器窗口宽度一致</li><li>但是在移动端，情况比较复杂</li></ul><h4 id="布局视口-layout-viewport"><a href="#布局视口-layout-viewport" class="headerlink" title="布局视口 layout viewport"></a>布局视口 layout viewport</h4><ul><li>浏览器厂商为了让用户在小屏幕下网页也能够很好显示，把视口宽度设置很大，一般 980px</li><li>所以在手机上，视口与浏览器屏幕宽度不再关联，完全独立的，这个浏览器厂商定的的视口为 布局视口.</li></ul><p><img src="https://camo.githubusercontent.com/43e1321a2708326ba26ac9710f714f75838b5343/687474703a2f2f37786c6332612e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f46764754754e6a6a366a6270485a765874636a2d4c365f7951577858" alt="image"></p><ul><li><p>布局视口我们是看不见的，只知道网页的最大宽度是 980px ，并且被缩放在了屏幕内。</p></li><li><p>可以这样设置布局视口的宽度：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=640&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>媒体查询与布局视口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@media (min-width: 700px)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>document.documentElement.clientWidth/Height</code> 返回布局视口的尺寸</li></ul><h4 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h4><ul><li>视觉视口是用户正在看到的网页的区域，大小是屏幕中CSS像素的数量。</li></ul><p><img src="https://camo.githubusercontent.com/7caa987d3754bd966fab21333dc8a351a3d108b2/687474703a2f2f37786c6332612e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f466d786c6e414f5f5f2d35365a5a4e5335485a6364516c6f4e546649" alt="image"></p><ul><li><code>window.innerWidth</code> 返回视觉视口的尺寸</li></ul><h4 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h4><ul><li>布局视口不友好，苹果引入了理想视口的概念，他是对设备来说最理想的布局视口尺寸，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>定义理想视口是浏览器的事情，并不能简单地认为是开发者定义的，开发者只能使用。</p></blockquote><ul><li><code>screen.width/height</code> 返回理想视口的尺寸，有兼容问题</li></ul><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><h4 id="缩放与设备像素、CSS像素的关系"><a href="#缩放与设备像素、CSS像素的关系" class="headerlink" title="缩放与设备像素、CSS像素的关系"></a>缩放与设备像素、CSS像素的关系</h4><ul><li>用户放大元素，CSS像素占用更多的设备像素</li></ul><h4 id="缩放与视口"><a href="#缩放与视口" class="headerlink" title="缩放与视口"></a>缩放与视口</h4><ul><li>页面被用户放大，视觉视口内CSS像素数量减少；被用户缩小，视觉视口内CSS像素数量增多就行了</li></ul><h4 id="缩放比例"><a href="#缩放比例" class="headerlink" title="缩放比例"></a>缩放比例</h4><ul><li>在下载浏览器中，可以这么算(理想视口与视觉视口的比)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zoom level = screen.width / window.innerWidth</span><br></pre></td></tr></table></figure><ul><li>设置缩放</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>使用initial-scale有一个副作用：同时也会将布局视口的尺寸设置为缩放后的尺寸。所以initial-scale=1与width=device-width的效果是一样的。</li></ul><h4 id="完美视口"><a href="#完美视口" class="headerlink" title="完美视口"></a>完美视口</h4><ul><li>解决各种浏览器兼容问题的理想视口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h4><ul><li><p>DPR : <code>dpr = 设备像素 / CSS像素</code></p></li><li><p>可以通过JS得到 像素比 ： <code>window.devicePixelRatio</code></p></li></ul><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><ul><li>英文原译：Asynchronous Module Definition，异步模块加载机制；</li><li>RequeireJS 遵循 AMD 规范，对模块的态度是预执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//AMD方式定义模块</span><br><span class="line">define([&apos;dep1&apos;,&apos;dep2&apos;],function(dep1,dep2)&#123;</span><br><span class="line">     //内部只能使用制定的模块</span><br><span class="line">      return function()&#123;&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">requirejs.config(&#123;</span><br><span class="line">    baseUrl: &apos;js/&apos;, //基本路径</span><br><span class="line">    paths: &#123;</span><br><span class="line">        dataService: &apos;&apos;</span><br><span class="line">        jquery: &apos;./libs/jquery&apos;</span><br><span class="line">        angular: &apos;./libs/angular&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    //配置不支持AMD规范</span><br><span class="line">    shim: &#123;</span><br><span class="line">        angular: &#123;</span><br><span class="line">            exports: &apos;angular&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>jQuery 默认支持 AMD 规范  引入需要将 jQuery —&gt; jquery</li><li>angular 不支持 AMD 规范 </li></ul><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><ul><li>Commen Module Definition </li><li>定义一个模块时候不需要立即制定依赖模块，在需要的时候require就可以</li><li>SeaJS 遵循CMD规范 对模块的态度是懒执行</li><li>阿里的人写的，已经卖给国外了，整合了AMD/CommenJS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//CMD</span><br><span class="line">define(function(require,exports,module)&#123;</span><br><span class="line">   //此处如果需要某XX模块，可以引入</span><br><span class="line">   var xx=require(&apos;XX&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="CommenJS"><a href="#CommenJS" class="headerlink" title="CommenJS"></a>CommenJS</h2><ul><li>利用JS的优势，运行在不同的JavaScript主机环境中，填补EcamaScript的空白</li><li>CommenJS 定了很多应用程序(非浏览器应用)使用的API</li><li>NodeJS 是CommenJS的实现</li></ul><h2 id="commonjs和ES6模块化暴露的本质分别是什么，请详细说明"><a href="#commonjs和ES6模块化暴露的本质分别是什么，请详细说明" class="headerlink" title="commonjs和ES6模块化暴露的本质分别是什么，请详细说明"></a>commonjs和ES6模块化暴露的本质分别是什么，请详细说明</h2><pre><code>1、commonjs暴露的方式    - module.exports = value;    - exports.xxx = value;    - 暴露的本质是exports对象2、ES6中暴露的方式    - export xxx （常规暴露，暴露的本质是对象，接收的时候只能以对象的解构赋值的方式来接收值）    - export default （默认暴露，暴露任意数据类型，暴露什么数据类型，接收什么数据类型）</code></pre><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><blockquote><p>注： “__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p></blockquote><h4 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h4><ul><li>模块打包机(bundler)： 分析你的项目结构，找到JS模块，还有一些浏览器不能运行的扩展语言(Scss, TypeScript),并将其转换和打包为合适的格式供浏览器使</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 一个常见的`webpack`配置文件</span><br><span class="line">const webpack = require(&apos;webpack&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &quot;/build&quot;,</span><br><span class="line">        filename: &quot;bundle-[hash].js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &apos;none&apos;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class="line">        historyApiFallback: true,//不跳转</span><br><span class="line">        inline: true,</span><br><span class="line">        hot: true</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /(\.jsx|\.js)$/,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: &quot;babel-loader&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: /node_modules/</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: &quot;style-loader&quot;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: &quot;css-loader&quot;,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: true</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: &quot;postcss-loader&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + &quot;/app/index.tmpl.html&quot;//new 一个这个插件的实例，并传入相关的参数</span><br><span class="line">        &#125;),</span><br><span class="line">        new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">        new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">        new ExtractTextPlugin(&quot;style.css&quot;)</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="WebPack和Grunt以及Gulp相比"><a href="#WebPack和Grunt以及Gulp相比" class="headerlink" title="WebPack和Grunt以及Gulp相比"></a>WebPack和Grunt以及Gulp相比</h4><ul><li>Gulp 基于数据流，从内存中往硬盘里面通过pipe管道输入数据 (项目构建工具)</li><li>Gulp 任务化 监视文件 gulp.watch(‘js/*<em>/</em>.js’, callback )</li><li>模块依赖  所有的文件都是模块 除了 HTML (引入JS文件)</li><li>WebPack本身只能加载JS模块  借助 loader 加载 css文件</li><li>webpack 里面 利用 require() 去寻找相互依赖</li></ul><h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><ul><li>作用： 可以将异步操作以同步的流程表达出来，避免了层层嵌套</li><li>ES6的Promise是一个构造函数, 用来生成promise实例</li><li>promise有三种状态(‘初始化状态’， ‘成功的状态’， ‘失败的状态’)</li><li>通过执行异步任务返回的结果(通常是发送ajax请求)来修改promise的状态</li><li>当promise的状态发生改变的时候会调用promise的实例中的then方法的成功或者失败的回调后函数，去执行相应的操作</li></ul><h2 id="理解RESful接口"><a href="#理解RESful接口" class="headerlink" title="理解RESful接口"></a>理解RESful接口</h2><ul><li>api接口的分类<ul><li>restful: rest风格</li><li>restless: 非rest风格</li></ul></li><li>rest接口<ul><li><a href="http://localhost/users" target="_blank" rel="noopener">http://localhost/users</a></li><li><a href="http://localhost/users/2" target="_blank" rel="noopener">http://localhost/users/2</a></li><li>不用带行为参数, 参数是路径的一个节点</li><li>请求的行为由请求方式来决定<ul><li>get: 查询(读, 获取数据)  R read</li><li>post: 添加(保存), C create</li><li>delete: 删除, D delete</li><li>put: 更新, U update</li></ul></li></ul></li><li>非rest接口<ul><li><a href="http://newsapi.gugujiankong.com/Handler.ashx?action=getusercomments&amp;userid=514" target="_blank" rel="noopener">http://newsapi.gugujiankong.com/Handler.ashx?action=getusercomments&amp;userid=514</a></li><li>可以带上行为参数, 通过key=value的形式携带</li><li>一般只有2种请求式:<ul><li>get</li><li>post<h2 id="模拟实现rest接口"><a href="#模拟实现rest接口" class="headerlink" title="模拟实现rest接口"></a>模拟实现rest接口</h2></li></ul></li></ul></li><li>使用json-server库</li><li>使用:<ul><li>下载 json-server</li><li>创建一个数据库文件: src/mock/db.json</li><li>启动服务器: json-server –watch src/mock/db.json</li></ul></li><li>编码测试访问rest接口<ul><li>axios</li><li>axios.get(): get请求, 查询</li><li>axios.post(): post请求, 保存</li><li>axios.put(): put请求, 更新</li><li>axios.delete(): delete请求, 删除</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何理解HTML结构的语义化&quot;&gt;&lt;a href=&quot;#如何理解HTML结构的语义化&quot; class=&quot;headerlink&quot; title=&quot;如何理解HTML结构的语义化&quot;&gt;&lt;/a&gt;如何理解HTML结构的语义化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;符合W3C统一规范标准，是技术趋
      
    
    </summary>
    
    
      <category term="JavaScript 面试 前端" scheme="http://yoursite.com/tags/JavaScript-%E9%9D%A2%E8%AF%95-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>测试博客</title>
    <link href="http://yoursite.com/2018/03/20/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/20/测试博客/</id>
    <published>2018-03-19T16:34:22.000Z</published>
    <updated>2018-03-19T16:38:00.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是博客的一级标题"><a href="#这是博客的一级标题" class="headerlink" title="这是博客的一级标题"></a>这是博客的一级标题</h1><h2 id="这是博客的二级标题"><a href="#这是博客的二级标题" class="headerlink" title="这是博客的二级标题"></a>这是博客的二级标题</h2><h3 id="这是博客的三级标题"><a href="#这是博客的三级标题" class="headerlink" title="这是博客的三级标题"></a>这是博客的三级标题</h3><h4 id="这是博客的四级标题"><a href="#这是博客的四级标题" class="headerlink" title="这是博客的四级标题"></a>这是博客的四级标题</h4><h5 id="这是博客的五级标题"><a href="#这是博客的五级标题" class="headerlink" title="这是博客的五级标题"></a>这是博客的五级标题</h5><h6 id="这是博客的六级标题"><a href="#这是博客的六级标题" class="headerlink" title="这是博客的六级标题"></a>这是博客的六级标题</h6><p>  这是内容很长很长很长很长很长很长很很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长长很长很长很长很长很长很长很长很长很长很长很长很长</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这是博客的一级标题&quot;&gt;&lt;a href=&quot;#这是博客的一级标题&quot; class=&quot;headerlink&quot; title=&quot;这是博客的一级标题&quot;&gt;&lt;/a&gt;这是博客的一级标题&lt;/h1&gt;&lt;h2 id=&quot;这是博客的二级标题&quot;&gt;&lt;a href=&quot;#这是博客的二级标题&quot; class
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/19/hello-world/"/>
    <id>http://yoursite.com/2018/03/19/hello-world/</id>
    <published>2018-03-19T15:10:53.155Z</published>
    <updated>2018-03-19T15:10:53.155Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
